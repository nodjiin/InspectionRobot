/* Generated by AN DISI Unibo */ 
package it.unibo.asc;
import alice.tuprolog.Term;
import alice.tuprolog.Struct;
import it.unibo.qactors.ActorContext;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.planned.QActorPlanned;
import it.unibo.qactors.action.ActionDummy;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;

public abstract class AbstractAsc extends QActorPlanned { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	
			protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
				return outEnvView;
			}
	
	
		public AbstractAsc(String actorId, ActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx, "./srcMore/it/unibo/asc/plans.txt", 
			"./srcMore/it/unibo/asc/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");		
	 	}
		@Override
		protected void doJob() throws Exception {
	 		initSensorSystem();
			boolean res = init();
			//println(getName() + " doJob " + res );
		} 
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/
	    public boolean init() throws Exception{	//public to allow reflection
	    try{
	    	curPlanInExec =  "init";
	    	boolean returnValue = suspendWork;
	    while(true){
	    nPlanIter++;
	    		{ String parg = "consult( \"./inspectionresults.pl\" )";
	    		  aar = solveGoal( parg , 0, "","" , "" );
	    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
	    		if( aar.getInterrupted() ){
	    			curPlanInExec   = "init";
	    			if( ! aar.getGoon() ) break;
	    		} 			
	    		if( aar.getResult().equals("failure")){
	    		if( ! aar.getGoon() ) break;
	    		}else if( ! aar.getGoon() ) break;
	    		}
	    		temporaryStr = "asc(starts)";
	    		println( temporaryStr );  
	    		if( ! switchToPlan("handlingInspectionResults").getGoon() ) break;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	    println( getName() + " ERROR " + e.getMessage() );
	    throw e;
	    }
	    }
	    public boolean handlingInspectionResults() throws Exception{	//public to allow reflection
	    try{
	    	curPlanInExec =  "handlingInspectionResults";
	    	boolean returnValue = suspendWork;
	    while(true){
	    nPlanIter++;
	    		//ReceiveMsg
	    		 		 aar = receiveAMsg(2000000, "" , "" ); 	//could block
	    				if( aar.getInterrupted() ){
	    					curPlanInExec   = "playTheGame";
	    					if( ! aar.getGoon() ) break;
	    				} 			
	    				if( ! aar.getGoon() ){
	    					System.out.println("			WARNING: receiveMsg in " + getName() + " TOUT " + aar.getTimeRemained() + "/" +  2000000);
	    					addRule("tout(receive,"+getName()+")");
	    				} 		 
	    				//println(getName() + " received " + aar.getResult() );
	    		temporaryStr = " \"ASC: Analyzing pictures\" ";
	    		println( temporaryStr );  
	    		//delay
	    		aar = delayReactive(3500,"" , "");
	    		if( aar.getInterrupted() ) curPlanInExec   = "handlingInspectionResults";
	    		if( ! aar.getGoon() ) break;
	    		//onMsg
	    		if( currentMessage.msgId().equals("inspectionresult") ){
	    			String parg = " \"ASC: Analysis finished\" ";
	    			parg = updateVars(null, Term.createTerm("inspectionresult(X)"), Term.createTerm("X"), 
	    				    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    				if( parg != null ) println( parg );  
	    		}if( (guardVars = evalTheGuard( " !?harmful" )) != null ){
	    		temporaryStr = unifyMsgContent("alarm","alarm", guardVars ).toString();
	    		emit( "alarm", temporaryStr );
	    		}
	    		if( (guardVars = evalTheGuard( " !?harmful" )) != null ){
	    		temporaryStr = " \"ASC: bag is harmful\" ";
	    		temporaryStr = substituteVars(guardVars,temporaryStr);
	    		println( temporaryStr );  
	    		}
	    		if( (guardVars = evalTheGuard( " !?safe" )) != null ){
	    		temporaryStr = " \"ASC: bag is safe\" ";
	    		temporaryStr = substituteVars(guardVars,temporaryStr);
	    		println( temporaryStr );  
	    		}
	    		if( repeatPlan(0).getGoon() ) continue;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	    println( getName() + " ERROR " + e.getMessage() );
	    throw e;
	    }
	    }
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	    
	 
		/* 
		* ------------------------------------------------------------
		* APPLICATION ACTIONS
		* ------------------------------------------------------------
		*/
		
	  }
	
